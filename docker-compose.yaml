version: '3'
  services:

    prometheus:
      container_name: prometheus
      image: prom/prometheus:v2.2.1
      ports:
        - 9090:9090
      restart: always

    jmx_exporter:
      container_name: jmx_exporter
      image: sscaling/jmx-prometheus-exporter
      ports:
        - 5556:5556
      links:
        - broker1
        - broker2
        - broker3
      volumes:
        - ./docker/jmx_exporter/config.yml:/opt/jmx_exporter/config.yml
      restart: always

    grafana:
      image: grafana/grafana:5.0.1
      container_name: grafana
      ports:
        - "3000:3000"
      links:
        - prometheus
      environment:
        GF_SERVER_ROOT_URL: 'http://grafana'
        GF_SECURITY_ADMIN_PASSWORD: 'admin'
        GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-piechart-panel,grafana-simple-json-datasource  1.3.5'
        GF_DASHBOARDS_JSON_ENABLED: 'true'
      volumes:
        - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
        - ./docker/grafana/config.yml:/etc/grafana/provisioning/dashboards/config.yml
        - ./docker/grafana/datasources/prometheus.yml:/etc/grafana/provisioning/datasources/prometheus.yml
      restart: always

    zookeeper:
      container_name: zookeeper
      image: confluentinc/cp-zookeeper:4.0.0
      hostname: zookeeper
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      restart: unless-stopped

    broker1:
      container_name: broker1
      image: confluentinc/cp-kafka:5.0.0
      hostname: broker1
      depends_on:
        - zookeeper
      ports:
        - "9092:9092"
      volumes:
        - ./docker/prometheus:/etc/prometheus
        - ./docker/config:/etc/kafka/docker/config
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
        KAFKA_JMX_PORT: 9999
      command: /etc/prometheus/run-kafka-server-with-java-agent.sh
      restart: always

    broker2:
      container_name: broker2
      image: confluentinc/cp-kafka:5.0.0
      hostname: broker2
      depends_on:
        - zookeeper
      ports:
        - "9093:9093"
      volumes:
        - ./docker/prometheus:/etc/prometheus
      environment:
        KAFKA_BROKER_ID: 2
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker2:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
        KAFKA_JMX_PORT: 9999
      command: /etc/prometheus/run-kafka-server-with-java-agent.sh
      restart: always

    broker3:
      container_name: broker3
      image: confluentinc/cp-kafka:5.0.0
      hostname: broker3
      depends_on:
        - zookeeper
      ports:
        - "9094:9094"
      volumes:
        - ./docker/prometheus:/etc/prometheus
      environment:
        KAFKA_BROKER_ID: 3
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker3:19094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
        KAFKA_JMX_PORT: 9999
      command: /etc/prometheus/run-kafka-server-with-java-agent.sh
      restart: always

    schema-registry:
      container_name: schema-registry
      image: confluentinc/cp-schema-registry:4.0.0
      hostname: schema-registry
      depends_on:
        - zookeeper
        - broker1
        - broker2
        - broker3
      ports:
        - "8081:8081"
      environment:
        SCHEMA_REGISTRY_HOST_NAME: schema-registry
        SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker1:19092
        SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      restart: always

    rest-proxy:
      container_name: rest-proxy
      image: confluentinc/cp-kafka-rest:5.0.0
      hostname: kafka-rest
      depends_on:
        - zookeeper
        - broker1
        - broker2
        - broker3
        - schema-registry
      ports:
        - "8082:8082"
      environment:
        KAFKA_REST_HOST_NAME: rest-proxy
        KAFKA_REST_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
        KAFKA_REST_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker1:19092'
        restart: always

    cassandra:
      container_name: cassandra
      image: cassandra:3.11.1
      hostname: cassandra
      ports:
        - "9042:9042"
      volumes:
        - ./docker/cassandra:/etc/cassandra/docker
        - ./docker/config:/etc/cassandra/docker/config
      environment:
        CASSANDRA_CLUSTER_NAME: 'codehub'
        CASSANDRA_DC: 'local'
      entrypoint: ["/etc/cassandra/docker/cassandra-entrypoint.sh"]
      restart: always

    elasticsearch:
      container_name: elasticsearch
      image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.3
      hostname: elasticsearch
      ports:
        - "9200:9200"
        - "9300:9300"
      environment:
        discovery.type: single-node


    kafka-topics-ui:
      image: landoop/kafka-topics-ui:0.9.4
      hostname: kafka-topics-ui
      ports:
        - "8000:8000"
      environment:
        KAFKA_REST_PROXY_URL: "http://localhost:8082/"
        PROXY: "true"
        MAX_BYTES: 500000
        RECORD_POLL_TIMEOUT: 50000
        KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS: 30000
      depends_on:
        - zookeeper
        - broker1
        - broker2
        - broker3
        - schema-registry
        - rest-proxy

    postgress:
        image: postgres:10
        container_name: codehub
        environment:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: codehub
          POSTGRES_DB: kafka_sink
        ports:
          - 5432:5432

    mongo:
      container_name: mongodb
      image: mongo
      hostname: mongodb
      ports:
        - "27017:27017"
